from odoo import models, fields, api
from odoo.exceptions import UserError
import logging

_logger = logging.getLogger(__name__)

class LimsRevisionRequestWizardV2(models.TransientModel):
    _name = 'lims.revision.request.wizard.v2'
    _description = 'Wizard para Solicitar Revisi√≥n v2'

    # ===============================================
    # === INFORMACI√ìN DEL AN√ÅLISIS ===
    # ===============================================
    analysis_id = fields.Many2one(
        'lims.analysis.v2',
        string='An√°lisis',
        required=True
    )
    
    sample_code = fields.Char(
        string='C√≥digo de Muestra',
        readonly=True
    )
    
    sample_identifier = fields.Char(
        string='Identificaci√≥n de Muestra',
        readonly=True
    )
    
    current_revision = fields.Integer(
        string='Revisi√≥n Actual',
        readonly=True
    )
    
    next_revision = fields.Integer(
        string='Nueva Revisi√≥n',
        compute='_compute_next_revision',
        help='N√∫mero que tendr√° la nueva revisi√≥n'
    )
    
    # ===============================================
    # === INFORMACI√ìN DE LA REVISI√ìN ===
    # ===============================================
    requested_by = fields.Char(
        string='Solicitado por',
        required=True,
        help='Nombre del cliente o persona que solicita la revisi√≥n',
        default=lambda self: self.env.user.name
    )
    
    reason = fields.Text(
        string='Motivo de la Revisi√≥n',
        required=True,
        help='Describa detalladamente por qu√© se solicita la revisi√≥n'
    )
    
    urgency = fields.Selection([
        ('low', 'Baja'),
        ('medium', 'Media'),
        ('high', 'Alta'),
        ('critical', 'Cr√≠tica')
    ], string='Urgencia', default='medium', required=True,
       help='Nivel de urgencia de la revisi√≥n')
    
    revision_type = fields.Selection([
        ('correction', 'Correcci√≥n de Resultados'),
        ('addition', 'Adici√≥n de Par√°metros'),
        ('method_change', 'Cambio de M√©todo'),
        ('client_request', 'Solicitud del Cliente'),
        ('quality_issue', 'Problema de Calidad'),
        ('other', 'Otro')
    ], string='Tipo de Revisi√≥n', required=True,
       help='Categor√≠a del motivo de revisi√≥n')
    
    # ===============================================
    # === INFORMACI√ìN ADICIONAL ===
    # ===============================================
    client_reference = fields.Char(
        string='Referencia del Cliente',
        help='N√∫mero de referencia o ticket del cliente'
    )
    
    expected_delivery = fields.Date(
        string='Entrega Esperada',
        help='Fecha esperada para la entrega de la revisi√≥n'
    )
    
    internal_notes = fields.Text(
        string='Notas Internas',
        help='Notas internas del laboratorio (no visibles en reportes)'
    )
    
    # ===============================================
    # === CAMPOS COMPUTADOS INFORMATIVOS ===
    # ===============================================
    analysis_info = fields.Html(
        string='Informaci√≥n del An√°lisis',
        compute='_compute_analysis_info',
        help='Resumen del an√°lisis a revisar'
    )
    
    current_parameters_info = fields.Text(
        string='Par√°metros Actuales',
        compute='_compute_current_parameters_info',
        help='Lista de par√°metros actuales con sus resultados'
    )
    
    can_create_revision = fields.Boolean(
        string='Puede Crear Revisi√≥n',
        compute='_compute_can_create_revision',
        help='Indica si se puede proceder con la revisi√≥n'
    )
    
    validation_message = fields.Text(
        string='Mensaje de Validaci√≥n',
        compute='_compute_can_create_revision',
        help='Mensajes de validaci√≥n o advertencias'
    )
    
    impact_warning = fields.Html(
        string='Advertencia de Impacto',
        compute='_compute_impact_warning',
        help='Advertencias sobre el impacto de crear la revisi√≥n'
    )

    # ===============================================
    # === M√âTODOS COMPUTADOS ===
    # ===============================================
    @api.depends('current_revision')
    def _compute_next_revision(self):
        """Calcular n√∫mero de la siguiente revisi√≥n"""
        for wizard in self:
            wizard.next_revision = wizard.current_revision + 1
    
    @api.depends('analysis_id')
    def _compute_analysis_info(self):
        """Generar informaci√≥n HTML del an√°lisis"""
        for wizard in self:
            if wizard.analysis_id:
                analysis = wizard.analysis_id
                
                # Determinar estado de firma
                if analysis.signature_state == 'signed':
                    signature_status = '<span style="color: #28a745;">‚úÖ Firmado</span>'
                elif analysis.signature_state == 'cancelled':
                    signature_status = '<span style="color: #dc3545;">‚ùå Cancelado</span>'
                else:
                    signature_status = '<span style="color: #6c757d;">‚è≥ Sin Firmar</span>'
                
                # Crear HTML informativo
                html_content = f"""
                <div style="padding: 15px; background-color: #f8f9fa; border-radius: 5px; margin: 10px 0;">
                    <h4 style="color: #2c5aa0; margin-top: 0;">üìã An√°lisis Actual</h4>
                    <table style="width: 100%; font-size: 12px;">
                        <tr>
                            <td style="padding: 3px; width: 30%;"><strong>Muestra:</strong></td>
                            <td style="padding: 3px;">{analysis.sample_code} - {analysis.sample_identifier}</td>
                        </tr>
                        <tr>
                            <td style="padding: 3px;"><strong>Cliente:</strong></td>
                            <td style="padding: 3px;">{analysis.customer_id.name if analysis.customer_id else 'No especificado'}</td>
                        </tr>
                        <tr>
                            <td style="padding: 3px;"><strong>Cadena:</strong></td>
                            <td style="padding: 3px;">{analysis.custody_chain_code}</td>
                        </tr>
                        <tr>
                            <td style="padding: 3px;"><strong>Estado de Firma:</strong></td>
                            <td style="padding: 3px;">{signature_status}</td>
                        </tr>
                        <tr>
                            <td style="padding: 3px;"><strong>Par√°metros:</strong></td>
                            <td style="padding: 3px;">{analysis.ready_parameters_count} listos de {analysis.total_parameters_count} total</td>
                        </tr>
                        <tr>
                            <td style="padding: 3px;"><strong>Revisi√≥n Actual:</strong></td>
                            <td style="padding: 3px;">N¬∞ {analysis.revision_number}</td>
                        </tr>
                    </table>
                </div>
                """
                
                wizard.analysis_info = html_content
            else:
                wizard.analysis_info = "<p>No hay an√°lisis seleccionado</p>"
    
    @api.depends('analysis_id')
    def _compute_current_parameters_info(self):
        """Mostrar informaci√≥n de par√°metros actuales"""
        for wizard in self:
            if wizard.analysis_id:
                params = wizard.analysis_id.parameter_analysis_ids
                
                if params:
                    param_list = []
                    for param in params:
                        status_map = {
                            'draft': '‚è≥ Borrador',
                            'in_progress': 'üîÑ En Proceso', 
                            'completed': '‚úÖ Completado'
                        }
                        
                        report_map = {
                            'draft': 'üìù En Proceso',
                            'ready': 'üìã Listo',
                            'reported': '‚úÖ Reportado'
                        }
                        
                        status = status_map.get(param.analysis_status, param.analysis_status)
                        report_status = report_map.get(param.report_status, param.report_status)
                        result = param.result_value or 'Sin resultado'
                        
                        param_list.append(f"‚Ä¢ {param.name}: {result} [{status}] [{report_status}]")
                    
                    wizard.current_parameters_info = "\n".join(param_list)
                else:
                    wizard.current_parameters_info = "No hay par√°metros en este an√°lisis."
            else:
                wizard.current_parameters_info = ""
    
    @api.depends('analysis_id', 'requested_by', 'reason')
    def _compute_can_create_revision(self):
        """Validar si se puede crear la revisi√≥n"""
        for wizard in self:
            messages = []
            can_create = True
            
            # Validar an√°lisis
            if not wizard.analysis_id:
                messages.append("‚ùå No hay an√°lisis seleccionado")
                can_create = False
            else:
                # Validar estado de firma
                if wizard.analysis_id.signature_state != 'signed':
                    messages.append("‚ùå Solo se pueden revisar an√°lisis firmados")
                    can_create = False
                else:
                    messages.append("‚úÖ An√°lisis firmado - puede revisarse")
                
                # Informaci√≥n sobre par√°metros
                ready_count = wizard.analysis_id.ready_parameters_count
                total_count = wizard.analysis_id.total_parameters_count
                
                if ready_count > 0:
                    messages.append(f"‚ÑπÔ∏è {ready_count} de {total_count} par√°metros ser√°n copiados")
                else:
                    messages.append("‚ö†Ô∏è No hay par√°metros listos - se copiar√°n todos los datos")
            
            # Validar campos requeridos
            if not wizard.requested_by or len(wizard.requested_by.strip()) < 3:
                messages.append("‚ùå Debe especificar qui√©n solicita la revisi√≥n")
                can_create = False
            
            if not wizard.reason or len(wizard.reason.strip()) < 10:
                messages.append("‚ùå El motivo debe tener al menos 10 caracteres")
                can_create = False
            
            if can_create:
                messages.append("üéØ Todo listo para crear la revisi√≥n")
            
            wizard.can_create_revision = can_create
            wizard.validation_message = "\n".join(messages)
    
    @api.depends('analysis_id', 'revision_type', 'urgency')
    def _compute_impact_warning(self):
        """Mostrar advertencias sobre el impacto de la revisi√≥n"""
        for wizard in self:
            if wizard.analysis_id:
                warnings = []
                
                # Advertencia general
                warnings.append("‚ö†Ô∏è <strong>IMPACTO DE LA REVISI√ìN:</strong>")
                warnings.append("‚Ä¢ Se cancelar√° la firma actual del an√°lisis")
                warnings.append("‚Ä¢ Los par√°metros volver√°n a estado 'borrador'")
                warnings.append("‚Ä¢ Se crear√° una nueva versi√≥n editable")
                warnings.append("‚Ä¢ Se generar√° el n√∫mero de revisi√≥n consecutivo")
                
                # Advertencias espec√≠ficas por tipo
                if wizard.revision_type == 'correction':
                    warnings.append("‚Ä¢ <span style='color: #dc3545;'>Los resultados actuales ser√°n modificables</span>")
                elif wizard.revision_type == 'addition':
                    warnings.append("‚Ä¢ <span style='color: #ffc107;'>Se podr√°n agregar nuevos par√°metros</span>")
                elif wizard.revision_type == 'method_change':
                    warnings.append("‚Ä¢ <span style='color: #17a2b8;'>Los m√©todos y procedimientos podr√°n cambiarse</span>")
                
                # Advertencias por urgencia
                if wizard.urgency == 'critical':
                    warnings.append("‚Ä¢ <span style='color: #dc3545;'><strong>CR√çTICO:</strong> Requiere atenci√≥n inmediata</span>")
                elif wizard.urgency == 'high':
                    warnings.append("‚Ä¢ <span style='color: #ffc107;'><strong>ALTA:</strong> Prioridad elevada</span>")
                
                # Informaci√≥n sobre historial
                if wizard.analysis_id.revision_count > 0:
                    warnings.append(f"‚Ä¢ Este an√°lisis ya tiene {wizard.analysis_id.revision_count} revisi√≥n(es) previa(s)")
                
                html_content = f"""
                <div style="padding: 15px; background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px; margin: 10px 0;">
                    {"<br/>".join(warnings)}
                </div>
                """
                
                wizard.impact_warning = html_content
            else:
                wizard.impact_warning = ""

    # ===============================================
    # === M√âTODOS DE ACCI√ìN ===
    # ===============================================
    def action_create_revision(self):
        """Crear la revisi√≥n"""
        self.ensure_one()
        
        # Validaci√≥n final
        if not self.can_create_revision:
            raise UserError(f'No se puede crear la revisi√≥n:\n{self.validation_message}')
        
        if not self.reason or len(self.reason.strip()) < 10:
            raise UserError('El motivo de la revisi√≥n debe tener al menos 10 caracteres.')
        
        if not self.requested_by or len(self.requested_by.strip()) < 3:
            raise UserError('Debe especificar qui√©n solicita la revisi√≥n.')
        
        # Preparar datos de revisi√≥n
        revision_data = {
            'requested_by': self.requested_by,
            'reason': self.reason,
            'urgency': self.urgency,
            'revision_type': self.revision_type,
            'client_reference': self.client_reference,
            'expected_delivery': self.expected_delivery,
            'internal_notes': self.internal_notes,
        }
        
        try:
            # Crear revisi√≥n
            revision = self.analysis_id.create_revision(revision_data)
            
            if revision:
                _logger.info(f"Revisi√≥n {revision.revision_number} creada para muestra {self.sample_code} "
                           f"solicitada por {self.requested_by}")
                
                # Abrir la nueva revisi√≥n
                return {
                    'type': 'ir.actions.act_window',
                    'res_model': 'lims.analysis.v2',
                    'res_id': revision.id,
                    'view_mode': 'form',
                    'target': 'current',
                    'context': {
                        'form_view_initial_mode': 'edit'
                    },
                    'flags': {
                        'mode': 'edit'
                    }
                }
            else:
                raise UserError('Error al crear la revisi√≥n. Intente nuevamente.')
                
        except Exception as e:
            _logger.error(f"Error al crear revisi√≥n para muestra {self.sample_code}: {str(e)}")
            raise UserError(f'Error al crear la revisi√≥n: {str(e)}')
    
    def action_cancel(self):
        """Cancelar el wizard"""
        return {
            'type': 'ir.actions.act_window_close',
        }
    
    # ===============================================
    # === M√âTODOS DE INICIALIZACI√ìN ===
    # ===============================================
    @api.model
    def default_get(self, fields_list):
        """Establecer valores por defecto desde contexto"""
        defaults = super().default_get(fields_list)
        
        # Obtener ID del an√°lisis desde contexto
        analysis_id = self.env.context.get('default_analysis_id')
        
        if analysis_id:
            analysis = self.env['lims.analysis.v2'].browse(analysis_id)
            
            if analysis.exists():
                defaults.update({
                    'analysis_id': analysis.id,
                    'sample_code': analysis.sample_code,
                    'sample_identifier': analysis.sample_identifier,
                    'current_revision': analysis.revision_number,
                })
        
        return defaults
    
    # ===============================================
    # === M√âTODOS ONCHANGE ===
    # ===============================================
    @api.onchange('revision_type')
    def _onchange_revision_type(self):
        """Auto-completar campos seg√∫n el tipo de revisi√≥n"""
        if self.revision_type:
            type_templates = {
                'correction': 'Correcci√≥n de resultados debido a ',
                'addition': 'Solicitud de an√°lisis adicionales para ',
                'method_change': 'Cambio de m√©todo anal√≠tico para ',
                'client_request': 'Solicitud espec√≠fica del cliente para ',
                'quality_issue': 'Problema de calidad identificado en ',
                'other': 'Revisi√≥n solicitada para ',
            }
            
            template = type_templates.get(self.revision_type, '')
            if template and not self.reason:
                self.reason = template + (self.sample_code or 'la muestra')
    
    @api.onchange('urgency')
    def _onchange_urgency(self):
        """Ajustar fecha esperada seg√∫n urgencia"""
        if self.urgency and not self.expected_delivery:
            today = fields.Date.context_today(self)
            
            if self.urgency == 'critical':
                # 1 d√≠a para cr√≠tico
                self.expected_delivery = fields.Date.add(today, days=1)
            elif self.urgency == 'high':
                # 3 d√≠as para alta
                self.expected_delivery = fields.Date.add(today, days=3)
            elif self.urgency == 'medium':
                # 5 d√≠as para media
                self.expected_delivery = fields.Date.add(today, days=5)
            else:
                # 7 d√≠as para baja
                self.expected_delivery = fields.Date.add(today, days=7)
    
    @api.onchange('analysis_id')
    def _onchange_analysis_id(self):
        """Actualizar informaci√≥n cuando cambia el an√°lisis"""
        if self.analysis_id:
            self.sample_code = self.analysis_id.sample_code
            self.sample_identifier = self.analysis_id.sample_identifier
            self.current_revision = self.analysis_id.revision_number
        else:
            self.sample_code = False
            self.sample_identifier = False
            self.current_revision = 0
    
    # ===============================================
    # === M√âTODOS DE VALIDACI√ìN ===
    # ===============================================
    @api.constrains('reason')
    def _check_reason_length(self):
        """Validar longitud del motivo"""
        for wizard in self:
            if wizard.reason and len(wizard.reason.strip()) < 10:
                raise UserError('El motivo de la revisi√≥n debe tener al menos 10 caracteres.')
    
    @api.constrains('requested_by')
    def _check_requested_by(self):
        """Validar solicitante"""
        for wizard in self:
            if wizard.requested_by and len(wizard.requested_by.strip()) < 3:
                raise UserError('El nombre del solicitante debe tener al menos 3 caracteres.')
    
    # ===============================================
    # === M√âTODOS AUXILIARES ===
    # ===============================================
    def _get_revision_summary(self):
        """Obtener resumen de la revisi√≥n a crear"""
        self.ensure_one()
        
        return {
            'sample_code': self.sample_code,
            'current_revision': self.current_revision,
            'next_revision': self.next_revision,
            'requested_by': self.requested_by,
            'reason': self.reason,
            'urgency': self.urgency,
            'revision_type': self.revision_type,
            'expected_delivery': self.expected_delivery,
        }